/*
 * spislave.h
 *
 *  Created on: 14.11.2018
 *      Author: F. Geissler
 */

#ifndef SPISLAVE_H_
#define SPISLAVE_H_

// Target definition in main.h file generated by CubeMX
#include "main.h"

// GCC integer types
#include <stdint.h>
#include <set>

// Board support package namespace
namespace bsp
{
	// Class that gives basic SPI peripheral device data and methods.
	// Prevents simultaneous bus access by multiple slave device drivers.
	class SpiSlave
	{
	public:
		// Constructor
		explicit SpiSlave(SPI_TypeDef * spi_instance, GPIO_TypeDef * cs_port,
				uint16_t cs_pin);

		virtual ~SpiSlave();

	private:
		// chip select port
		GPIO_TypeDef * cs_port_;
		// chip select pin
		uint16_t cs_pin_;
		// SPI peripheral instance
		SPI_HandleTypeDef hspi_;
		// State
		bool transfer_started_;

		// Set of all instances to prevent same time activation
		static std::set<SpiSlave const *> instances_;

	protected:

		// Attempt to begin spi transfer by pulling CS pin low.
		// Returns false if another transfer on the same peripheral already started.
		bool SpiStart();

		// Attempt to push the CS pin high.
		// Returns false if transfer still in progress.
		// Returns true if no transfer started or successful.
		bool SpiEnd();

		// Write a block of data.
		// Returns false if no transfer started.
		bool SpiWrite(uint8_t* data, size_t size);

		// Write a block of data.
		// Returns false if no transfer started.
		bool SpiRead(uint8_t* data, size_t size);

		// Transceive a block of data.
		// Returns false if no transfer started.
		bool SpiTransceive(uint8_t* txdata, uint8_t *rxdata, size_t size);

		// Configure the SPI peripheral
		bool SpiConfig(uint32_t data_size = SPI_DATASIZE_8BIT, uint32_t clk_polarity = SPI_POLARITY_LOW, uint32_t clk_phase = SPI_PHASE_1EDGE);

	};

}; // namespace bsp

#endif /* SPISLAVE_H_ */
